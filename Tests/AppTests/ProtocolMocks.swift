///
/// @Generated by Mockolo
///



import Vapor
@testable import App


class SlackWebServicingMock: SlackWebServicing {
    init() { }
    init(req: Request? = nil) {
        self.req = req
    }

    var sendSlackPayloadCallCount = 0
    var sendSlackPayloadHandler: ((String, Emoji?, Request) throws -> (EventLoopFuture<ClientResponse>))?
    func sendSlackPayload(text: String, with emoji: Emoji?, on req: Request) throws -> EventLoopFuture<ClientResponse> {
        sendSlackPayloadCallCount += 1
        if let sendSlackPayloadHandler = sendSlackPayloadHandler {
            return try sendSlackPayloadHandler(text, emoji, req)
        }
        fatalError("sendSlackPayloadHandler returns can't have a default value thus its handler must be set")
    }

    var reqSetCallCount = 0
    var req: Request? = nil { didSet { reqSetCallCount += 1 } }
}

class FreshbooksWebServicingMock: FreshbooksWebServicing {
    init() { }


    var deleteWebhookCallCount = 0
    var deleteWebhookHandler: ((String, Int, Request) throws -> (EventLoopFuture<ClientResponse>))?
    func deleteWebhook(accountID: String, webhookID: Int, on req: Request) throws -> EventLoopFuture<ClientResponse> {
        deleteWebhookCallCount += 1
        if let deleteWebhookHandler = deleteWebhookHandler {
            return try deleteWebhookHandler(accountID, webhookID, req)
        }
        fatalError("deleteWebhookHandler returns can't have a default value thus its handler must be set")
    }

    var registerNewWebhookCallCount = 0
    var registerNewWebhookHandler: ((String, String, Request) throws -> (EventLoopFuture<NewWebhookPayload>))?
    func registerNewWebhook(accountID: String, accessToken: String, on req: Request) throws -> EventLoopFuture<NewWebhookPayload> {
        registerNewWebhookCallCount += 1
        if let registerNewWebhookHandler = registerNewWebhookHandler {
            return try registerNewWebhookHandler(accountID, accessToken, req)
        }
        fatalError("registerNewWebhookHandler returns can't have a default value thus its handler must be set")
    }

    var fetchWebhooksCallCount = 0
    var fetchWebhooksHandler: ((String, String, Request) throws -> (EventLoopFuture<FreshbooksWebhookResponseResult>))?
    func fetchWebhooks(accountID: String, accessToken: String, req: Request) throws -> EventLoopFuture<FreshbooksWebhookResponseResult> {
        fetchWebhooksCallCount += 1
        if let fetchWebhooksHandler = fetchWebhooksHandler {
            return try fetchWebhooksHandler(accountID, accessToken, req)
        }
        fatalError("fetchWebhooksHandler returns can't have a default value thus its handler must be set")
    }

    var fetchInvoiceCallCount = 0
    var fetchInvoiceHandler: ((String, Int, String, Request) throws -> (EventLoopFuture<FreshbooksInvoiceContent>))?
    func fetchInvoice(accountID: String, invoiceID: Int, accessToken: String, req: Request) throws -> EventLoopFuture<FreshbooksInvoiceContent> {
        fetchInvoiceCallCount += 1
        if let fetchInvoiceHandler = fetchInvoiceHandler {
            return try fetchInvoiceHandler(accountID, invoiceID, accessToken, req)
        }
        fatalError("fetchInvoiceHandler returns can't have a default value thus its handler must be set")
    }

    var fetchUserCallCount = 0
    var fetchUserHandler: ((String, Request) throws -> (EventLoopFuture<UserFetchResponsePayload>))?
    func fetchUser(accessToken: String, on req: Request) throws -> EventLoopFuture<UserFetchResponsePayload> {
        fetchUserCallCount += 1
        if let fetchUserHandler = fetchUserHandler {
            return try fetchUserHandler(accessToken, req)
        }
        fatalError("fetchUserHandler returns can't have a default value thus its handler must be set")
    }

    var fetchInvoicesCallCount = 0
    var fetchInvoicesHandler: ((String, String, Int, Request) throws -> (EventLoopFuture<InvoicesMetaDataContent>))?
    func fetchInvoices(accountID: String, accessToken: String, page: Int, on req: Request) throws -> EventLoopFuture<InvoicesMetaDataContent> {
        fetchInvoicesCallCount += 1
        if let fetchInvoicesHandler = fetchInvoicesHandler {
            return try fetchInvoicesHandler(accountID, accessToken, page, req)
        }
        fatalError("fetchInvoicesHandler returns can't have a default value thus its handler must be set")
    }

    var confirmWebhookCallCount = 0
    var confirmWebhookHandler: ((String, Request) throws -> (EventLoopFuture<ClientResponse>))?
    func confirmWebhook(accessToken: String, on req: Request) throws -> EventLoopFuture<ClientResponse> {
        confirmWebhookCallCount += 1
        if let confirmWebhookHandler = confirmWebhookHandler {
            return try confirmWebhookHandler(accessToken, req)
        }
        fatalError("confirmWebhookHandler returns can't have a default value thus its handler must be set")
    }

    var authCallCount = 0
    var authHandler: ((String, Request) throws -> (EventLoopFuture<TokenExchangeResponse>))?
    func auth(with code: String, on req: Request) throws -> EventLoopFuture<TokenExchangeResponse> {
        authCallCount += 1
        if let authHandler = authHandler {
            return try authHandler(code, req)
        }
        fatalError("authHandler returns can't have a default value thus its handler must be set")
    }
}


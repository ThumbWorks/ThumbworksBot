///
/// @Generated by Mockolo
///



import Vapor
@testable import App


public class SlackWebServicingMock: SlackWebServicing {
    public init() { }


    public var sendSlackPayloadCallCount = 0
    public var sendSlackPayloadHandler: ((String, Emoji?, Request) -> (EventLoopFuture<ClientResponse>))?
    public func sendSlackPayload(text: String, with emoji: Emoji?, on req: Request) -> EventLoopFuture<ClientResponse> {
        sendSlackPayloadCallCount += 1
        if let sendSlackPayloadHandler = sendSlackPayloadHandler {
            return sendSlackPayloadHandler(text, emoji, req)
        }
        fatalError("sendSlackPayloadHandler returns can't have a default value thus its handler must be set")
    }
}

public class FreshbooksWebServicingMock: FreshbooksWebServicing {
    public init() { }


    public var deleteWebhookCallCount = 0
    public var deleteWebhookHandler: ((AccountCredentials, Int, Request) -> (EventLoopFuture<Void>))?
    public func deleteWebhook(credentials: AccountCredentials, webhookID: Int, on req: Request) -> EventLoopFuture<Void> {
        deleteWebhookCallCount += 1
        if let deleteWebhookHandler = deleteWebhookHandler {
            return deleteWebhookHandler(credentials, webhookID, req)
        }
        fatalError("deleteWebhookHandler returns can't have a default value thus its handler must be set")
    }

    public var registerNewWebhookCallCount = 0
    public var registerNewWebhookHandler: ((AccountCredentials, WebhookType, Client) -> (EventLoopFuture<NewWebhookPayloadCallback>))?
    public func registerNewWebhook(credentials: AccountCredentials, type: WebhookType, with client: Client) -> EventLoopFuture<NewWebhookPayloadCallback> {
        registerNewWebhookCallCount += 1
        if let registerNewWebhookHandler = registerNewWebhookHandler {
            return registerNewWebhookHandler(credentials, type, client)
        }
        fatalError("registerNewWebhookHandler returns can't have a default value thus its handler must be set")
    }

    public var fetchWebhooksCallCount = 0
    public var fetchWebhooksHandler: ((AccountCredentials, Int, Request) -> (EventLoopFuture<WebhookResponseResult>))?
    public func fetchWebhooks(credentials: AccountCredentials, page: Int, req: Request) -> EventLoopFuture<WebhookResponseResult> {
        fetchWebhooksCallCount += 1
        if let fetchWebhooksHandler = fetchWebhooksHandler {
            return fetchWebhooksHandler(credentials, page, req)
        }
        fatalError("fetchWebhooksHandler returns can't have a default value thus its handler must be set")
    }

    public var fetchInvoiceCallCount = 0
    public var fetchInvoiceHandler: ((AccountCredentials, Int, Request) -> (EventLoopFuture<InvoiceContent>))?
    public func fetchInvoice(credentials: AccountCredentials, invoiceID: Int, req: Request) -> EventLoopFuture<InvoiceContent> {
        fetchInvoiceCallCount += 1
        if let fetchInvoiceHandler = fetchInvoiceHandler {
            return fetchInvoiceHandler(credentials, invoiceID, req)
        }
        fatalError("fetchInvoiceHandler returns can't have a default value thus its handler must be set")
    }

    public var fetchClientCallCount = 0
    public var fetchClientHandler: ((AccountCredentials, Int, Request) -> (EventLoopFuture<ClientContent>))?
    public func fetchClient(credentials: AccountCredentials, clientID: Int, req: Request) -> EventLoopFuture<ClientContent> {
        fetchClientCallCount += 1
        if let fetchClientHandler = fetchClientHandler {
            return fetchClientHandler(credentials, clientID, req)
        }
        fatalError("fetchClientHandler returns can't have a default value thus its handler must be set")
    }

    public var fetchPaymentCallCount = 0
    public var fetchPaymentHandler: ((AccountCredentials, Int, Request) -> (EventLoopFuture<PaymentContent>))?
    public func fetchPayment(credentials: AccountCredentials, paymentID: Int, req: Request) -> EventLoopFuture<PaymentContent> {
        fetchPaymentCallCount += 1
        if let fetchPaymentHandler = fetchPaymentHandler {
            return fetchPaymentHandler(credentials, paymentID, req)
        }
        fatalError("fetchPaymentHandler returns can't have a default value thus its handler must be set")
    }

    public var fetchUserCallCount = 0
    public var fetchUserHandler: ((String, Request) -> (EventLoopFuture<UserResponseObject>))?
    public func fetchUser(accessToken: String, on req: Request) -> EventLoopFuture<UserResponseObject> {
        fetchUserCallCount += 1
        if let fetchUserHandler = fetchUserHandler {
            return fetchUserHandler(accessToken, req)
        }
        fatalError("fetchUserHandler returns can't have a default value thus its handler must be set")
    }

    public var fetchInvoicesCallCount = 0
    public var fetchInvoicesHandler: ((AccountCredentials, Int, Client) -> (EventLoopFuture<InvoicesMetaDataContent>))?
    public func fetchInvoices(credentials: AccountCredentials, page: Int, with client: Client) -> EventLoopFuture<InvoicesMetaDataContent> {
        fetchInvoicesCallCount += 1
        if let fetchInvoicesHandler = fetchInvoicesHandler {
            return fetchInvoicesHandler(credentials, page, client)
        }
        fatalError("fetchInvoicesHandler returns can't have a default value thus its handler must be set")
    }

    public var confirmWebhookCallCount = 0
    public var confirmWebhookHandler: ((String, String, Int, String, Request) -> (EventLoopFuture<Void>))?
    public func confirmWebhook(accessToken: String, accountID: String, objectID: Int, verifier: String, on req: Request) -> EventLoopFuture<Void> {
        confirmWebhookCallCount += 1
        if let confirmWebhookHandler = confirmWebhookHandler {
            return confirmWebhookHandler(accessToken, accountID, objectID, verifier, req)
        }
        fatalError("confirmWebhookHandler returns can't have a default value thus its handler must be set")
    }

    public var authCallCount = 0
    public var authHandler: ((String, Request) -> (EventLoopFuture<TokenExchangeResponse>))?
    public func auth(with code: String, on req: Request) -> EventLoopFuture<TokenExchangeResponse> {
        authCallCount += 1
        if let authHandler = authHandler {
            return authHandler(code, req)
        }
        fatalError("authHandler returns can't have a default value thus its handler must be set")
    }
}

